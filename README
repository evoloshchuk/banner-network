Banner-network - a simple web­application in Ruby.

--------------------------------------------------------------------------------

Application requirements:

You will be creating a web­application to serve banners for an advertising
agency. The web­app should be smart enough to render banners based on their
revenue­performance.

You are given 4 sets of CSV files, each set contains the following files:
impressions.csv   [:banner_id, :campaign_id]
clicks.csv        [:click_id, :banner_id, :campaign_id]
conversions.csv   [:conversion_id, :click_id, :revenue]

Based on these data, you should be able to determine how well a banner performs
for a campaign based on the revenue (which you can find in the conversions.csv)

Then there are a few possible scenarios:
(x = amount of banners with conversions within a campaign)
1) x >= 10 - show the Top 10 banners based on revenue within that campaign.
2) 4 < x < 10 - show the Top x banners based on revenue within that campaign.
3) 0 < x < 5 - show a collection of 5 banners, containing:
    a) the top x banners based on revenue within that campaign.
    b) banners with the most clicks within that campaign to make up a collection
    of 5 unique banners.
4) x == 0 - show the top­5 banners based on clicks. If the amount of banners
with clicks are less than 5 within that campaign, then you should add random
banners to make up a collection of 5 unique banners.

So when a request hits your Campaign­URL, like
http://yourdomain.com/campaigns/{campaign_id}, it should somehow render or
redirect to one of your top­x banners.

To avoid saturation, we also believe that the top banners being served should
not follow an order based on its performance, but they should appear in a random
sequence. You should also avoid having a banner served twice in a row for a
unique visitor.

And finally, the 4 sets of csv’s represent the 4 quarters of an hour. So when I
visit your website during 00m­15m, I want to see banners being served based on
the statistics of the first dataset, and if i visit your site during 16m­30m, I
want to see the banners being served based on the second dataset etc....

It is completely up to you which tools you will use

--------------------------------------------------------------------------------

Technical details:

* An application is written in Ruby, because the main goal of this project was
to demonstrate of an ability to work with Ruby.

* Bundler is used to manege all application's dependencies and make sure
everything is run under controlled environment.

* Rake is used to manage all application's tasks, including starting resque
worker and scheduler, running spec tests and warming up the cache.

* Foreman is used to manage application's processes. There are 3 process:
the main web process for serving request, the worker process to process
background job and scheduler so scheduling these jobs.

* Thin was chosen as an application server, because it's fast and simple to get
start with.

* Sinatra framework was chosen because of its simplicity and lightness, which is
a perfect match for such a simple application as this.

* No proper ORM was used. Mostly to keep it simple and avoid unnecessary
complication for such a simple application. Ideally, all the provisional data
like campaign, banners and campaign's banners would be stored in a proper
database and heavily cached. For our purpose campaigns and banners data is
considered to be static and campaign's banners data is stored in Redis, with the
help of redis-objects gem.

* Resque and Resque-Scheduler were chosen to run and organize background jobs of
updating campaign's banners based on the performance. Mostly because it seems to
be the standard solution and it is supported by Heroku.

* To avoid having a banner served twice in a row for a unique visitor we store
last displayed banner id in user's session. Redis-based session (facilitated by
Moneta gem) is used in order to keep the cookies size small.

--------------------------------------------------------------------------------

Installation:

1) Install Ruby (v2.1.0) - see https://www.ruby-lang.org/en/downloads/
2) Install latest RubyGems - http://rubygems.org/pages/download
3) $ gem install bundler
4) $ git clone git@github.com:evoloshchuk/banner-network.git target
5) $ cd target
6) $ bundle install
7) $ rake warmup
8) $ foreman start

--------------------------------------------------------------------------------

Load test:

$ siege -b -c 100 -t 1m http://localhost:5000/campaigns/1
** SIEGE 3.0.1
** Preparing 100 concurrent users for battle.
The server is now under siege...
Lifting the server siege...      done.

Transactions:		       86600 hits
Availability:		      100.00 %
Elapsed time:		       59.10 secs
Data transferred:	      272.27 MB
Response time:		        0.07 secs
Transaction rate:	     1465.31 trans/sec
Throughput:		            4.61 MB/sec
Concurrency:		       99.86
Successful transactions:   86610
Failed transactions:	       0
Longest transaction:	    0.12
Shortest transaction:	    0.04

--------------------------------------------------------------------------------

Demo:

http://gentle-gorge-2760.herokuapp.com/campaigns/1
